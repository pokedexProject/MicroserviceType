// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/type.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypeServiceClient is the client API for TypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypeServiceClient interface {
	CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error)
	GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error)
	UpdateType(ctx context.Context, in *UpdateTypeRequest, opts ...grpc.CallOption) (*UpdateTypeResponse, error)
	DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error)
	ListTypes(ctx context.Context, in *ListTypesRequest, opts ...grpc.CallOption) (*ListTypesResponse, error)
}

type typeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeServiceClient(cc grpc.ClientConnInterface) TypeServiceClient {
	return &typeServiceClient{cc}
}

func (c *typeServiceClient) CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error) {
	out := new(CreateTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.TypeService/CreateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeServiceClient) GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error) {
	out := new(GetTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.TypeService/GetType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeServiceClient) UpdateType(ctx context.Context, in *UpdateTypeRequest, opts ...grpc.CallOption) (*UpdateTypeResponse, error) {
	out := new(UpdateTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.TypeService/UpdateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeServiceClient) DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error) {
	out := new(DeleteTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.TypeService/DeleteType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeServiceClient) ListTypes(ctx context.Context, in *ListTypesRequest, opts ...grpc.CallOption) (*ListTypesResponse, error) {
	out := new(ListTypesResponse)
	err := c.cc.Invoke(ctx, "/proto.TypeService/ListTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypeServiceServer is the server API for TypeService service.
// All implementations must embed UnimplementedTypeServiceServer
// for forward compatibility
type TypeServiceServer interface {
	CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error)
	GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error)
	UpdateType(context.Context, *UpdateTypeRequest) (*UpdateTypeResponse, error)
	DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error)
	ListTypes(context.Context, *ListTypesRequest) (*ListTypesResponse, error)
	mustEmbedUnimplementedTypeServiceServer()
}

// UnimplementedTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTypeServiceServer struct {
}

func (UnimplementedTypeServiceServer) CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateType not implemented")
}
func (UnimplementedTypeServiceServer) GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetType not implemented")
}
func (UnimplementedTypeServiceServer) UpdateType(context.Context, *UpdateTypeRequest) (*UpdateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateType not implemented")
}
func (UnimplementedTypeServiceServer) DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteType not implemented")
}
func (UnimplementedTypeServiceServer) ListTypes(context.Context, *ListTypesRequest) (*ListTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTypes not implemented")
}
func (UnimplementedTypeServiceServer) mustEmbedUnimplementedTypeServiceServer() {}

// UnsafeTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypeServiceServer will
// result in compilation errors.
type UnsafeTypeServiceServer interface {
	mustEmbedUnimplementedTypeServiceServer()
}

func RegisterTypeServiceServer(s grpc.ServiceRegistrar, srv TypeServiceServer) {
	s.RegisterService(&TypeService_ServiceDesc, srv)
}

func _TypeService_CreateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeServiceServer).CreateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TypeService/CreateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeServiceServer).CreateType(ctx, req.(*CreateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeService_GetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeServiceServer).GetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TypeService/GetType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeServiceServer).GetType(ctx, req.(*GetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeService_UpdateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeServiceServer).UpdateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TypeService/UpdateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeServiceServer).UpdateType(ctx, req.(*UpdateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeService_DeleteType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeServiceServer).DeleteType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TypeService/DeleteType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeServiceServer).DeleteType(ctx, req.(*DeleteTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeService_ListTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeServiceServer).ListTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TypeService/ListTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeServiceServer).ListTypes(ctx, req.(*ListTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TypeService_ServiceDesc is the grpc.ServiceDesc for TypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TypeService",
	HandlerType: (*TypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateType",
			Handler:    _TypeService_CreateType_Handler,
		},
		{
			MethodName: "GetType",
			Handler:    _TypeService_GetType_Handler,
		},
		{
			MethodName: "UpdateType",
			Handler:    _TypeService_UpdateType_Handler,
		},
		{
			MethodName: "DeleteType",
			Handler:    _TypeService_DeleteType_Handler,
		},
		{
			MethodName: "ListTypes",
			Handler:    _TypeService_ListTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/type.proto",
}
